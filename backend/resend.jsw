// backend/resend.jsw — Resend Mailer (final & robust, mit Tag-Sanitizer)

import wixSecretsBackend from 'wix-secrets-backend';
import { fetch } from 'wix-fetch';

/* ========== Helpers ========== */
const toStr = v => String(v ?? '');
const num = x => (Number.isFinite(Number(x)) ? String(Number(x)) : '');
const esc = s => toStr(s).replace(/[&<>"'`]/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;','`':'&#96;'}[m]));
const isEmail = e => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(toStr(e).trim());

// Zusätzliche Formatter für schöne Ausgabe
const euro = v => {
  const n = Number(v);
  if (!Number.isFinite(n)) return '';
  try {
    return new Intl.NumberFormat('de-DE',{style:'currency',currency:'EUR',minimumFractionDigits:2}).format(n);
  } catch {
    return (n.toFixed(2)+' €').replace('.',',');
  }
};
const fmt = v => {
  const n = Number(v);
  if (!Number.isFinite(n)) return '';
  try {
    return new Intl.NumberFormat('de-DE', { maximumFractionDigits: 2 }).format(n);
  } catch {
    return String(n);
  }
};
const yn = v => (String(v).toLowerCase() === 'ja' || v === true ? 'Ja' : 'Nein');
const safe = (s, fb = '') => (s ? String(s) : fb);

// Resend verlangt nur ASCII [A-Za-z0-9_-] in Tag-Namen/-Werten
function sanitizeTag(v) {
  const s = String(v ?? '').trim().replace(/[^A-Za-z0-9_-]/g, '_');
  return s.length ? s.slice(0, 64) : null;
}
function safeTrim(v) { const s = toStr(v).trim(); return s.length ? s : null; }

/* ========== E-Mail Blueprints: jetzt mit allen übermittelten Daten ========== */

function buildHtml({ contact = {}, payload = {}, meta = {} }) {
  // Kontakt
  const name   = [contact?.vorname, contact?.nachname].filter(Boolean).join(' ') || 'Unbekannt';
  const email  = safe(contact?.email);
  const tel    = safe(contact?.telefon);
  const wunsch = safe(contact?.wunschtermin);
  const nachricht = safe(contact?.nachricht); // wird angezeigt, falls vom Frontend mitgeschickt

  // Kalkulations-/Objektdaten
  const typ      = safe(payload?.typ);
  const lfm      = fmt(payload?.lfm);
  const hoehe    = fmt(payload?.hoehe);
  const addr     = safe(payload?.adresse);
  const km       = fmt(payload?.km_einfach);

  const schutz   = safe(payload?.schutz); // "ja"/"nein"
  const sClean   = fmt(payload?.schutz_clean);
  const sMont    = fmt(payload?.schutz_mont ?? payload?.schluss_mont);
  const sDemont  = fmt(payload?.schutz_demont);

  const endpreis = euro(payload?.endpreis);
  const eurKm    = euro(payload?.eur_km);
  const setup    = euro(payload?.setup);
  const ladder   = euro(payload?.ladder);
  const steiger  = euro(payload?.steiger);
  const minpreis = euro(payload?.minpreis);
  const tsCalc   = safe(payload?.ts);

  // Meta
  const metaSource = safe(meta?.source);
  const metaVers   = safe(meta?.version);
  const metaTs     = safe(meta?.timestamp);

  // Farben wie im Frontend
  const brand = '#1B3898';
  const ink   = '#0f172a';
  const muted = '#6b7280';
  const border= '#e5e7eb';

  // HTML (tabellenbasiert, mailclient-freundlich)
  return `
<table role="presentation" cellpadding="0" cellspacing="0" width="100%" style="background:#f7f8fb;padding:16px 0">
  <tr>
    <td align="center">
      <table role="presentation" cellpadding="0" cellspacing="0" width="640" style="width:640px;max-width:100%;background:#ffffff;border:1px solid ${border};border-radius:12px;overflow:hidden">
        <tr>
          <td style="background:${brand};color:#fff;padding:16px 20px;font:600 16px/1.2 system-ui,Segoe UI,Roboto,Helvetica,Arial">
            DachrinneCheck · Neue Anfrage (Preisrechner)
          </td>
        </tr>
        <tr>
          <td style="padding:16px 20px">

            <!-- Header: Richtpreis & Typ -->
            <table role="presentation" width="100%" cellpadding="0" cellspacing="0">
              <tr>
                <td style="padding:12px;border:1px dashed ${border};border-radius:10px">
                  <div style="font:700 18px/1.3 system-ui,Segoe UI,Roboto,Helvetica,Arial;color:${ink};margin-bottom:6px">
                    Richtpreis: ${endpreis || '–'}
                  </div>
                  <div style="color:${muted};font:14px/1.5 system-ui,Segoe UI,Roboto,Helvetica,Arial">
                    Typ: <b>${esc(typ || '-')}</b>
                  </div>
                </td>
              </tr>
            </table>

            <!-- Kontakt -->
            <h3 style="font:700 16px/1.2 system-ui,Segoe UI,Roboto,Helvetica,Arial;color:${ink};margin:18px 0 8px">Kontakt</h3>
            <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="border:1px solid ${border};border-radius:10px;overflow:hidden">
              <tr><td style="padding:10px;background:#f9fafb;width:180px;font:600 14px system-ui">Name</td><td style="padding:10px;font:14px system-ui">${esc(name)}</td></tr>
              <tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">E-Mail</td><td style="padding:10px;font:14px system-ui">${esc(email||'')}</td></tr>
              <tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">Telefon</td><td style="padding:10px;font:14px system-ui">${esc(tel||'')}</td></tr>
              <tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">Wunschtermin</td><td style="padding:10px;font:14px system-ui">${esc(wunsch||'')}</td></tr>
              ${nachricht ? `<tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">Nachricht</td><td style="padding:10px;font:14px system-ui;white-space:pre-wrap">${esc(nachricht)}</td></tr>` : ''}
            </table>

            <!-- Objekt & Anfahrt -->
            <h3 style="font:700 16px/1.2 system-ui,Segoe UI,Roboto,Helvetica,Arial;color:${ink};margin:18px 0 8px">Objekt & Anfahrt</h3>
            <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="border:1px solid ${border};border-radius:10px;overflow:hidden">
              <tr><td style="padding:10px;background:#f9fafb;width:180px;font:600 14px system-ui">Adresse</td><td style="padding:10px;font:14px system-ui">${esc(addr||'')}</td></tr>
              <tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">Entfernung (einfach)</td><td style="padding:10px;font:14px system-ui">${km ? `${esc(km)} km` : '–'}</td></tr>
            </table>

            <!-- Kalkulationsdaten -->
            <h3 style="font:700 16px/1.2 system-ui,Segoe UI,Roboto,Helvetica,Arial;color:${ink};margin:18px 0 8px">Daten aus Kalkulator</h3>
            <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="border:1px solid ${border};border-radius:10px;overflow:hidden">
              <tr><td style="padding:10px;background:#f9fafb;width:220px;font:600 14px system-ui">Länge Dachrinne</td><td style="padding:10px;font:14px system-ui">${lfm ? `${esc(lfm)} lfm` : '–'}</td></tr>
              <tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">Höhe</td><td style="padding:10px;font:14px system-ui">${hoehe ? `${esc(hoehe)} m` : '–'}</td></tr>
              <tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">Dachrinnenschutz</td><td style="padding:10px;font:14px system-ui">${esc(yn(schutz))}</td></tr>
              ${String(schutz).toLowerCase()==='ja'
                ? `
                  <tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">Schutz · Reinigung</td><td style="padding:10px;font:14px system-ui">${sClean || '0'} lfm</td></tr>
                  <tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">Schutz · Montage</td><td style="padding:10px;font:14px system-ui">${sMont || '0'} lfm</td></tr>
                  <tr><td style="padding:10px;background:#f9fafb;font:600 14px system-ui">Schutz · Demontage</td><td style="padding:10px;font:14px system-ui">${sDemont || '0'} lfm</td></tr>
                `
                : ''
              }
            </table>


            <!-- Meta -->
            <div style="margin-top:16px;color:${muted};font:12px/1.6 system-ui,Segoe UI,Roboto,Helvetica,Arial;border-top:1px dashed ${border};padding-top:10px">
              Quelle: ${esc(metaSource || '')} · Version ${esc(metaVers || '')} · ${esc(metaTs || '')}
            </div>
            <div style="margin-top:6px;color:${muted};font:12px/1.6 system-ui">Hinweis: Richtpreis ohne Darstellung einzelner Positionen (intern).</div>

          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>`;
}

function buildText({ contact = {}, payload = {}, meta = {} }) {
  const name   = [contact?.vorname, contact?.nachname].filter(Boolean).join(' ') || 'Unbekannt';
  const email  = contact?.email || '';
  const tel    = contact?.telefon || '';
  const wunsch = contact?.wunschtermin || '';
  const nachricht = contact?.nachricht || '';

  const typ    = payload?.typ || '';
  const lfm    = payload?.lfm;
  const hoehe  = payload?.hoehe;
  const addr   = payload?.adresse || '';
  const km     = payload?.km_einfach;

  const schutz = payload?.schutz; // "ja"/"nein"
  const sClean = payload?.schutz_clean;
  const sMont  = payload?.schutz_mont ?? payload?.schluss_mont;
  const sDemont= payload?.schutz_demont;

  const lines = [
    `DachrinneCheck – Neue Anfrage (Preisrechner)`,
    ``,
    `Richtpreis: ${euro(payload?.endpreis) || '-'}`,
    `Typ: ${typ || '-'}`,
    ``,
    `Kontakt`,
    `  Name: ${name}`,
    `  E-Mail: ${email}`,
    `  Telefon: ${tel}`,
    `  Wunschtermin: ${wunsch}`,
  ];
  if (nachricht) {
    lines.push(`  Nachricht: ${nachricht.replace(/\s+/g,' ').trim()}`);
  }
  lines.push(
    ``,
    `Objekt & Anfahrt`,
    `  Adresse: ${addr}`,
    `  Entfernung (einfach): ${Number.isFinite(Number(km)) ? fmt(km)+' km' : '-'}`,
    ``,
    `Daten aus Kalkulator`,
    `  Länge Dachrinne: ${Number.isFinite(Number(lfm)) ? fmt(lfm)+' lfm' : '-'}`,
    `  Höhe: ${Number.isFinite(Number(hoehe)) ? fmt(hoehe)+' m' : '-'}`,
    `  Dachrinnenschutz: ${yn(schutz)}`,
  );
  if (String(schutz).toLowerCase()==='ja') {
    lines.push(
      `  Schutz · Reinigung: ${Number.isFinite(Number(sClean)) ? fmt(sClean)+' lfm' : '0 lfm'}`,
      `  Schutz · Montage: ${Number.isFinite(Number(sMont)) ? fmt(sMont)+' lfm' : '0 lfm'}`,
      `  Schutz · Demontage: ${Number.isFinite(Number(sDemont)) ? fmt(sDemont)+' lfm' : '0 lfm'}`
    );
  }
  lines.push(
    ``,
    `Parameter`,
    `  EUR/km: ${euro(payload?.eur_km) || '-'}`,
    `  Setup: ${euro(payload?.setup) || '-'}`,
    `  Leiter (ab ~6 m): ${euro(payload?.ladder) || '-'}`,
    `  Steiger (bei Schutz & >5 m): ${euro(payload?.steiger) || '-'}`,
    `  Mindestauftrag: ${euro(payload?.minpreis) || '-'}`,
    `  Kalkulator-Zeitstempel: ${payload?.ts || ''}`,
    ``,
    `Meta`,
    `  Quelle: ${meta?.source || ''}`,
    `  Version: ${meta?.version || ''}`,
    `  Timestamp: ${meta?.timestamp || ''}`
  );

  return lines.join('\n');
}

/* ========== Secrets laden (mit Optionalen) ========== */
async function loadSecrets() {
  const need = async (name) => {
    const v = await wixSecretsBackend.getSecret(name);
    if (!v) throw new Error(`MISSING_SECRET_${name}`);
    return v;
  };
  const maybe = async (name) => {
    try { return await wixSecretsBackend.getSecret(name); } catch { return null; }
  };

  const RESEND_API_KEY = await need('RESEND_API_KEY');
  const ADMIN_EMAIL    = await need('ADMIN_EMAIL');

  const RESEND_FROM      = await maybe('RESEND_FROM');       // z.B. noreply@dachrinnecheck.de
  const RESEND_REPLY_TO  = await maybe('RESEND_REPLY_TO');   // z.B. kontakt@dachrinnecheck.de
  const RESEND_BCC       = await maybe('RESEND_BCC');        // optional Archiv
  const RESEND_TAG       = await maybe('RESEND_TAG');        // z.B. "preisrechner"
  const RESEND_TAG_NAME  = await maybe('RESEND_TAG_NAME');   // eigener Tag-Name (optional)
  const RESEND_TAG_VALUE = await maybe('RESEND_TAG_VALUE');  // eigener Tag-Wert (optional)

  return {
    RESEND_API_KEY,
    ADMIN_EMAIL,
    RESEND_FROM: safeTrim(RESEND_FROM),
    RESEND_REPLY_TO: safeTrim(RESEND_REPLY_TO),
    RESEND_BCC: safeTrim(RESEND_BCC),
    RESEND_TAG: safeTrim(RESEND_TAG),
    RESEND_TAG_NAME: safeTrim(RESEND_TAG_NAME),
    RESEND_TAG_VALUE: safeTrim(RESEND_TAG_VALUE),
  };
}

/* ========== Tags bauen (ASCII-safe) ========== */
function buildTags({ meta = {}, secrets = {} }) {
  const tags = [];

  // Quelle (fallback: preisrechner)
  const src = sanitizeTag(meta?.source) || 'preisrechner';
  tags.push({ name: 'source', value: src });

  // Version (z.B. "1.2.0" -> "1_2_0")
  const ver = sanitizeTag(meta?.version);
  if (ver) tags.push({ name: 'version', value: ver });

  // Timestamp kompakt ASCII-safe (z.B. 20250818T193340Z)
  const iso = String(meta?.timestamp || '');
  const compact = iso.replace(/[^0-9TzZ]/g, ''); // nur 0-9, T, Z, z
  const ts = sanitizeTag(compact || new Date().toISOString().replace(/[^0-9TzZ]/g, ''));
  if (ts) tags.push({ name: 'timestamp', value: ts });

  // Einfache Secret-Variante: RESEND_TAG -> {tag: <wert>}
  if (secrets.RESEND_TAG) {
    const v = sanitizeTag(secrets.RESEND_TAG);
    if (v) tags.push({ name: 'tag', value: v });
  }
  // Präzise Secret-Variante: NAME + VALUE
  if (secrets.RESEND_TAG_NAME && secrets.RESEND_TAG_VALUE) {
    const n = sanitizeTag(secrets.RESEND_TAG_NAME);
    const v = sanitizeTag(secrets.RESEND_TAG_VALUE);
    if (n && v) tags.push({ name: n, value: v });
  }

  // Gültige Paare behalten
  return tags.filter(t => sanitizeTag(t.name) && sanitizeTag(t.value));
}

/* ========== Resend call (mit Retry bei 429) ========== */
async function sendResendEmail({ apiKey, body, retries = 1 }) {
  const doCall = async () => {
    const r = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${apiKey}`, 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });
    let j = {}; try { j = await r.json(); } catch {}
    return { r, j };
  };

  let { r, j } = await doCall();
  if (r.status === 429 && retries > 0) {
    await new Promise(res => setTimeout(res, 800));
    ({ r, j } = await doCall());
  }

  if (!r.ok) {
    const code = r.status;
    const message = j?.message || `RESEND_HTTP_${code}`;
    return { ok:false, status:code, error:message, id:j?.id||null };
  }
  return { ok:true, status:r.status, id:j?.id||null };
}

/* ========== Öffentliche Funktionen ========== */

// Admin-Mail (Use-Case)
export async function mailAdmin({ contact = {}, payload = {}, meta = {} }) {
  try {
    const secrets = await loadSecrets();
    if (!isEmail(secrets.ADMIN_EMAIL)) return { ok:false, error:'MISSING_OR_INVALID_SECRET_ADMIN_EMAIL' };

    const fromAddress = secrets.RESEND_FROM || 'noreply@dachrinnecheck.de'; // Domain in Resend verifizieren!
    const from = `DachrinneCheck <${fromAddress}>`;
    const replyTo = (secrets.RESEND_REPLY_TO && isEmail(secrets.RESEND_REPLY_TO)) ? secrets.RESEND_REPLY_TO : secrets.ADMIN_EMAIL;
    const bcc = (secrets.RESEND_BCC && isEmail(secrets.RESEND_BCC)) ? [secrets.RESEND_BCC] : undefined;

    const name = [contact?.vorname, contact?.nachname].filter(Boolean).join(' ') || 'Unbekannt';
    const subject = `Neue Anfrage (Preisrechner) – ${name}`;
    const html = buildHtml({ contact, payload, meta });
    const text = buildText({ contact, payload, meta });
    const tags = buildTags({ meta, secrets });

    const body = {
      from,
      to: [secrets.ADMIN_EMAIL],
      subject,
      html,
      text,
      reply_to: replyTo,
      ...(bcc ? { bcc } : {}),
      ...(tags.length ? { tags } : {})
    };

    const res = await sendResendEmail({ apiKey: secrets.RESEND_API_KEY, body });
    return res.ok
      ? { ok:true, id:res.id, status:res.status, usedFrom:from }
      : { ok:false, status:res.status, error:res.error, usedFrom:from, requestBody:{ to: secrets.ADMIN_EMAIL, replyTo, hasBcc: !!bcc, tags } };

  } catch (e) {
    return { ok:false, error: toStr(e?.message||e) };
  }
}

// Optional: Kundenbestätigung (verkürzt)
export async function mailCustomer({ contact = {}, payload = {}, meta = {} }) {
  try {
    const secrets = await loadSecrets();
    const customerEmail = toStr(contact?.email||'').trim();
    if (!isEmail(customerEmail)) return { ok:false, error:'INVALID_CUSTOMER_EMAIL' };

    const fromAddress = secrets.RESEND_FROM || 'noreply@dachrinnecheck.de';
    const from = `DachrinneCheck <${fromAddress}>`;
    const replyTo = (secrets.RESEND_REPLY_TO && isEmail(secrets.RESEND_REPLY_TO)) ? secrets.RESEND_REPLY_TO : secrets.ADMIN_EMAIL;

    const subject = 'Wir haben Ihre Anfrage erhalten';
    const html = `
      <p>Hallo ${esc(contact?.vorname||'')},</p>
      <p>vielen Dank für Ihre Anfrage über unseren Preisrechner. Wir melden uns kurzfristig bei Ihnen.</p>
      <p><b>Ihr Richtpreis:</b> ${euro(payload?.endpreis) || '-'}</p>
      <p>Viele Grüße<br/>DachrinneCheck</p>
    `;
    const text = `Hallo ${toStr(contact?.vorname||'')},
wir haben Ihre Anfrage erhalten und melden uns kurzfristig.
Richtpreis: ${(euro(payload?.endpreis) || '-')}.
Viele Grüße
DachrinneCheck`;

    const tags = [{ name: 'purpose', value: 'customer_confirmation' }];

    const body = {
      from,
      to: [customerEmail],
      subject,
      html,
      text,
      reply_to: replyTo,
      tags
    };

    const res = await sendResendEmail({ apiKey: secrets.RESEND_API_KEY, body });
    return res.ok
      ? { ok:true, id:res.id, status:res.status, usedFrom:from }
      : { ok:false, status:res.status, error:res.error, usedFrom:from, requestBody:{ to: customerEmail, replyTo, tags } };

  } catch (e) {
    return { ok:false, error: toStr(e?.message||e) };
  }
}

